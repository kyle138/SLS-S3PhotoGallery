service: sls-s3photogallery
# app and org for use with dashboard.serverless.com
app: sls-s3photogallery
#org: your-org-name

frameworkVersion: '3'

package:
  patterns:
    - '!README.md'
    - '!LICENSE'
    - '!config/config*'
    - '!static/**'
    - '!sample_post.json'

custom:
  stage: ${opt:stage, "dev1"}
  s3config: ${file(./config/config.json):${self:custom.stage}}

provider:
  name: aws
  runtime: nodejs16.x
  lambdaHashingVersion: 20201221
  memorySize: 128
  timeout: 180
  region: us-east-1
  stage: ${self:custom.stage}
  httpApi:
    cors: true
  environment:
    S3BUCKET: ${self:custom.s3config.bucket}

# Lambda function's IAM Role
iam:
  role:
    statements:
      - Effect: "Allow"
        Action:
          - "s3:ListBucket"
          - "s3:GetBucketLocation"
          - "s3:PutObject"
          - "s3:GetObject"
        Resource: arn:aws:s3:::${self:custom.config.bucket}*

# Service wide environment variables
environment:
  S3BUCKET: ${self:custom.s3config.bucket}

functions:
  tagger:
    handler: lambdas/tagger.handler
    description: "Triggered by S3 when tags are added/updated/deleted"
    events:
      - s3:
          bucket: ${self:custom.s3config.bucket}
          event: s3:ObjectTagging:*

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
